'use client';

import { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import * as Icons from 'lucide-react';

type Step = {
  id: number;
  icon: keyof typeof Icons | null;
  title: string;
  subtitle: string;
};

export default function Testing() {
  const [steps, setSteps] = useState<Step[]>([]);
  const [title, setTitle] = useState('');
  const [subtitle, setSubtitle] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchTestingData = async () => {
      try {
        const res = await fetch(
          `${process.env.NEXT_PUBLIC_API_URL}/api/api-pentest-page?populate[OurAPIPentestingMethodology][populate]=*`
        );
        const json = await res.json();
        const data = json.data;

        setTitle(data.testingTitle || '');
        setSubtitle(data.testingSubtitle || '');
        setSteps(data.OurAPIPentestingMethodology || []);
      } catch (err) {
        setError('Failed to load testing methodology.');
      } finally {
        setLoading(false);
      }
    };

    fetchTestingData();
  }, []);

  if (loading) {
    return (
      <section className="py-16 text-center text-gray-600 dark:text-gray-300">
        Loading testing methodology...
      </section>
    );
  }

  if (error || !steps.length) {
    return (
      <section className="py-16 text-center text-red-600">
        {error || 'No testing methodology data found.'}
      </section>
    );
  }

  return (
    <section className="py-16 px-4">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-16">
          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            className="text-3xl font-bold mb-4 text-gray-900 dark:text-white"
          >
            {title}
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ delay: 0.1 }}
            className="text-xl text-gray-600 dark:text-gray-300 max-w-2xl mx-auto"
          >
            {subtitle}
          </motion.p>
        </div>

        <div className="relative">
          <div className="hidden md:block absolute top-1/2 left-0 right-0 h-1 bg-gradient-to-r from-red-500 to-red-800 -translate-y-1/2"></div>

          <div className="grid md:grid-cols-5 gap-8">
            {steps.map((step, index) => {
              const LucideIcon = step.icon && Icons[step.icon] ? Icons[step.icon] : Icons.Zap;
              return (
                <motion.div
                  key={step.id}
                  initial={{ opacity: 0, y: 30 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.5, delay: index * 0.1 }}
                  className="relative z-10"
                >
                  <div className="flex flex-col items-center text-center">
                    <div className="w-16 h-16 rounded-full bg-gradient-to-r from-red-600 to-red-800 flex items-center justify-center mb-4">
                      <span className="text-white text-xl font-bold">{index + 1}</span>
                    </div>
                    <div className="bg-white dark:bg-gray-900 rounded-xl p-6 border border-gray-200 dark:border-gray-800 shadow-lg w-full">
                      <div className="bg-red-100 dark:bg-red-900/20 w-12 h-12 rounded-lg flex items-center justify-center mx-auto mb-4">
                        <LucideIcon className="w-6 h-6" />
                      </div>
                      <h3 className="font-bold text-lg mb-2 text-gray-900 dark:text-white">
                        {step.title}
                      </h3>
                      <p className="text-gray-600 dark:text-gray-400">{step.subtitle}</p>
                    </div>
                  </div>
                </motion.div>
              );
            })}
          </div>
        </div>
      </div>
    </section>
  );
}
